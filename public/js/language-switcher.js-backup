const translations = {
    en: { /* Your English translations (as provided) */ },
    es: { /* Your Spanish translations (as provided) */ },
    ko: { /* Your Korean translations (as provided) */ },
    zh: { /* Your Chinese translations (as provided) */ }
};

/** Retrieve translation by key with nested support and fallback */
function getTranslation(lang, key) {
    const keys = key.split('.');
    let value = translations[lang];

    keys.forEach(k => {
        value = value ? value[k] : null;
    });

    // Proper nested fallback to English
    if (!value) {
        value = translations['en'];
        keys.forEach(k => {
            value = value ? value[k] : null;
        });
    }

    return value || ''; // return empty if still not found
}

/** Apply translations dynamically */
function applyTranslations(lang) {
    document.querySelectorAll('[data-i18n]').forEach(element => {
        const key = element.dataset.i18n;
        const translation = getTranslation(lang, key);
        if (translation) {
            element.textContent = translation;
        }
    });
}

/** Detect user language from browser or IP */
async function detectUserLanguage() {
    try {
        const response = await fetch('https://ipapi.co/json/');
        const data = await response.json();
        const country = data.country_name;

        const languageMap = {
            'United States': 'en',
            'China': 'zh',
            'Korea': 'ko',
            'Spain': 'es',
        };

        return languageMap[country] || 'en';
    } catch (error) {
        console.error("‚ö†Ô∏è Geolocation failed:", error);
        return 'en';
    }
}

/** Initialize the entire language system */
async function initLanguageSystem() {
    const savedLang = localStorage.getItem("selectedLang") || await detectUserLanguage();
    document.documentElement.setAttribute("lang", savedLang);
    applyTranslations(savedLang);

    // Update greeting (example)
    const greetings = {
        en: "Welcome, Space Explorer!",
        es: "¬°Bienvenido, Explorador Espacial!",
        ko: "ÌôòÏòÅÌï©ÎãàÎã§, Ïö∞Ï£º ÌÉêÌóòÍ∞Ä!",
        zh: "Ê¨¢ËøéÔºåÂ§™Á©∫Êé¢Á¥¢ËÄÖÔºÅ"
    };

    const greetingElement = document.getElementById("aiGreeting");
    if (greetingElement) {
        greetingElement.innerText = greetings[savedLang] || greetings.en;
    }

    // Setup language buttons
    document.querySelectorAll(".lang-btn").forEach(button => {
        button.addEventListener("click", function () {
            const selectedLang = this.getAttribute("data-lang");
            if (!selectedLang) {
                console.error("‚ùå Language attribute missing on flag.");
                return;
            }
            localStorage.setItem("selectedLang", selectedLang);
            console.log(`üåç Language changed to: ${selectedLang}`);
            window.location.reload();
        });
    });
}

// Run language system once DOM is fully loaded
document.addEventListener("DOMContentLoaded", initLanguageSystem);
